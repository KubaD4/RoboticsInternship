-# Generated UP code from Prolog knowledge
# This code is automatically generated.
import unified_planning as up
import os
from unified_planning.shortcuts import *
from unified_planning.model import Variable, InstantaneousAction, Problem
from unified_planning.io import PDDLWriter
from unified_planning.model.operators import OperatorKind
from unified_planning.shortcuts import *
up.shortcuts.get_environment().credits_stream = None

Location = UserType('location')
Container = UserType('container')
Resources = UserType('resources')
Robot = UserType('robot')
Crane = UserType('crane')

Pos = UserType('pos')

on_ground = Fluent('on_ground', BoolType(), p0=Container)
available = Fluent('available', BoolType(), p0=Crane)
moving_ground_to_top = Fluent('moving_ground_to_top', BoolType(), p0=Crane, p1=Container, p2=Container, p3=Location)
unloading_container = Fluent('unloading_container', BoolType(), p0=Crane, p1=Robot, p2=Container, p3=Location)
moving_robot = Fluent('moving_robot', BoolType(), p0=Robot, p1=Location, p2=Location)
loading_container = Fluent('loading_container', BoolType(), p0=Crane, p1=Robot, p2=Container, p3=Location)
clear = Fluent('clear', BoolType(), p0=Container)
moving_top_to_ground = Fluent('moving_top_to_ground', BoolType(), p0=Crane, p1=Container, p2=Container, p3=Location)
on = Fluent('on', BoolType(), p0=Container, p1=Container)
at = Fluent('at', BoolType(), p0=Container, p1=Location)
moving_top_to_top = Fluent('moving_top_to_top', BoolType(), p0=Crane, p1=Container, p2=Container, p3=Container, p4=Location)
moving_ground_to_ground = Fluent('moving_ground_to_ground', BoolType(), p0=Crane, p1=Container, p2=Location, p3=Location)

problem = Problem('from_prolog')
problem.add_fluent(on_ground, default_initial_value=False)
problem.add_fluent(available, default_initial_value=False)
problem.add_fluent(moving_ground_to_top, default_initial_value=False)
problem.add_fluent(unloading_container, default_initial_value=False)
problem.add_fluent(moving_robot, default_initial_value=False)
problem.add_fluent(loading_container, default_initial_value=False)
problem.add_fluent(clear, default_initial_value=False)
problem.add_fluent(moving_top_to_ground, default_initial_value=False)
problem.add_fluent(on, default_initial_value=False)
problem.add_fluent(at, default_initial_value=False)
problem.add_fluent(moving_top_to_top, default_initial_value=False)
problem.add_fluent(moving_ground_to_ground, default_initial_value=False)

location1 = Object('location1', Location)
location2 = Object('location2', Location)
c1 = Object('c1', Container)
c2 = Object('c2', Container)
r1 = Object('r1', Robot)
crane1 = Object('crane1', Crane)
crane2 = Object('crane2', Crane)
problem.add_objects([
    location1,
    location2,
    c1,
    c2,
    r1,
    crane1,
    crane2,
])

problem.set_initial_value(at(c1, location1), True)
problem.set_initial_value(on_ground(c1), True)
problem.set_initial_value(at(c2, location1), True)
problem.set_initial_value(on(c2, c1), True)
problem.set_initial_value(clear(c2), True)
problem.set_initial_value(at(r1, location1), True)
problem.set_initial_value(available(r1), True)
problem.set_initial_value(at(crane1, location1), True)
problem.set_initial_value(available(crane1), True)
problem.set_initial_value(at(crane2, location2), True)
problem.set_initial_value(available(crane2), True)

problem.add_goal(at(c1, location1))
problem.add_goal(on_ground(c1))
problem.add_goal(at(c2, location2))
problem.add_goal(on_ground(c2))
problem.add_goal(clear(c2))
problem.add_goal(at(r1, location1))
problem.add_goal(available(r1))
problem.add_goal(at(crane1, location1))
problem.add_goal(available(crane1))
problem.add_goal(at(crane2, location2))
problem.add_goal(available(crane2))

# --- action move_ground_to_top_start
move_ground_to_top_start = InstantaneousAction('move_ground_to_top_start', Param1=Crane, Param2=Container, Param3=Container, Param4=Location)
Param1 = move_ground_to_top_start.parameter('Param1')
Param2 = move_ground_to_top_start.parameter('Param2')
Param3 = move_ground_to_top_start.parameter('Param3')
Param4 = move_ground_to_top_start.parameter('Param4')
move_ground_to_top_start.add_precondition(available(Param1))
move_ground_to_top_start.add_precondition(on_ground(Param2))
move_ground_to_top_start.add_precondition(clear(Param2))
move_ground_to_top_start.add_precondition(at(Param2, Param4))
move_ground_to_top_start.add_precondition(at(Param3, Param4))
move_ground_to_top_start.add_precondition(clear(Param3))
any_move_ground_to_top_start_0 = Variable('any_move_ground_to_top_start_0', Crane)
any_move_ground_to_top_start_2 = Variable('any_move_ground_to_top_start_2', Container)
any_move_ground_to_top_start_3 = Variable('any_move_ground_to_top_start_3', Location)
move_ground_to_top_start.add_precondition(Not(Exists(moving_ground_to_top(any_move_ground_to_top_start_0, Param2, any_move_ground_to_top_start_2, any_move_ground_to_top_start_3), any_move_ground_to_top_start_0, any_move_ground_to_top_start_2, any_move_ground_to_top_start_3)))
move_ground_to_top_start.add_effect(available(Param1), False)
move_ground_to_top_start.add_effect(on_ground(Param2), False)
move_ground_to_top_start.add_effect(clear(Param3), False)
move_ground_to_top_start.add_effect(moving_ground_to_top(Param1, Param2, Param3, Param4), True)
problem.add_action(move_ground_to_top_start)

# --- action move_ground_to_top_end
move_ground_to_top_end = InstantaneousAction('move_ground_to_top_end', Param1=Crane, Param2=Container, Param3=Container, Param4=Container)
Param1 = move_ground_to_top_end.parameter('Param1')
Param2 = move_ground_to_top_end.parameter('Param2')
Param3 = move_ground_to_top_end.parameter('Param3')
Param4 = move_ground_to_top_end.parameter('Param4')
move_ground_to_top_end.add_precondition(moving_ground_to_top(Param1, Param2, Param3, Param4))
move_ground_to_top_end.add_effect(moving_ground_to_top(Param1, Param2, Param3, Param4), False)
move_ground_to_top_end.add_effect(on(Param2, Param3), True)
move_ground_to_top_end.add_effect(clear(Param2), True)
move_ground_to_top_end.add_effect(available(Param1), True)
problem.add_action(move_ground_to_top_end)

# --- action load_container_start
load_container_start = InstantaneousAction('load_container_start', Param1=Crane, Param2=Robot, Param3=Container, Param4=Location)
Param1 = load_container_start.parameter('Param1')
Param2 = load_container_start.parameter('Param2')
Param3 = load_container_start.parameter('Param3')
Param4 = load_container_start.parameter('Param4')
load_container_start.add_precondition(available(Param1))
load_container_start.add_precondition(available(Param2))
load_container_start.add_precondition(clear(Param3))
load_container_start.add_precondition(at(Param3, Param4))
load_container_start.add_precondition(at(Param2, Param4))
any_load_container_start_0 = Variable('any_load_container_start_0', Crane)
any_load_container_start_1 = Variable('any_load_container_start_1', Robot)
any_load_container_start_3 = Variable('any_load_container_start_3', Location)
load_container_start.add_precondition(Not(Exists(loading_container(any_load_container_start_0, any_load_container_start_1, Param3, any_load_container_start_3), any_load_container_start_0, any_load_container_start_1, any_load_container_start_3)))
load_container_start.add_effect(available(Param1), False)
load_container_start.add_effect(available(Param2), False)
load_container_start.add_effect(clear(Param3), False)
load_container_start.add_effect(loading_container(Param1, Param2, Param3, Param4), True)
problem.add_action(load_container_start)

# --- action load_container_end
load_container_end = InstantaneousAction('load_container_end', Param1=Crane, Param2=Robot, Param3=Container, Param4=Container)
Param1 = load_container_end.parameter('Param1')
Param2 = load_container_end.parameter('Param2')
Param3 = load_container_end.parameter('Param3')
Param4 = load_container_end.parameter('Param4')
load_container_end.add_precondition(loading_container(Param1, Param2, Param3, Param4))
load_container_end.add_effect(loading_container(Param1, Param2, Param3, Param4), False)
load_container_end.add_effect(on(Param3, Param2), True)
load_container_end.add_effect(clear(Param3), True)
load_container_end.add_effect(available(Param1), True)
load_container_end.add_effect(available(Param2), True)
problem.add_action(load_container_end)

# --- action unload_container_start
unload_container_start = InstantaneousAction('unload_container_start', Param1=Crane, Param2=Robot, Param3=Container, Param4=Location)
Param1 = unload_container_start.parameter('Param1')
Param2 = unload_container_start.parameter('Param2')
Param3 = unload_container_start.parameter('Param3')
Param4 = unload_container_start.parameter('Param4')
unload_container_start.add_precondition(available(Param1))
unload_container_start.add_precondition(available(Param2))
unload_container_start.add_precondition(on(Param3, Param2))
unload_container_start.add_precondition(at(Param2, Param4))
any_unload_container_start_0 = Variable('any_unload_container_start_0', Crane)
any_unload_container_start_1 = Variable('any_unload_container_start_1', Robot)
any_unload_container_start_3 = Variable('any_unload_container_start_3', Location)
unload_container_start.add_precondition(Not(Exists(unloading_container(any_unload_container_start_0, any_unload_container_start_1, Param3, any_unload_container_start_3), any_unload_container_start_0, any_unload_container_start_1, any_unload_container_start_3)))
unload_container_start.add_effect(available(Param1), False)
unload_container_start.add_effect(available(Param2), False)
unload_container_start.add_effect(on(Param3, Param2), False)
unload_container_start.add_effect(unloading_container(Param1, Param2, Param3, Param4), True)
problem.add_action(unload_container_start)

# --- action unload_container_end
unload_container_end = InstantaneousAction('unload_container_end', Param1=Crane, Param2=Robot, Param3=Container, Param4=Container)
Param1 = unload_container_end.parameter('Param1')
Param2 = unload_container_end.parameter('Param2')
Param3 = unload_container_end.parameter('Param3')
Param4 = unload_container_end.parameter('Param4')
unload_container_end.add_precondition(unloading_container(Param1, Param2, Param3, Param4))
unload_container_end.add_effect(unloading_container(Param1, Param2, Param3, Param4), False)
unload_container_end.add_effect(on_ground(Param3), True)
unload_container_end.add_effect(clear(Param3), True)
unload_container_end.add_effect(available(Param1), True)
unload_container_end.add_effect(available(Param2), True)
problem.add_action(unload_container_end)

# --- action move_ground_to_ground_start
move_ground_to_ground_start = InstantaneousAction('move_ground_to_ground_start', Param1=Crane, Param2=Container, Param3=Location, Param4=Location)
Param1 = move_ground_to_ground_start.parameter('Param1')
Param2 = move_ground_to_ground_start.parameter('Param2')
Param3 = move_ground_to_ground_start.parameter('Param3')
Param4 = move_ground_to_ground_start.parameter('Param4')
move_ground_to_ground_start.add_precondition(available(Param1))
move_ground_to_ground_start.add_precondition(on_ground(Param2))
move_ground_to_ground_start.add_precondition(clear(Param2))
move_ground_to_ground_start.add_precondition(at(Param2, Param3))
any_move_ground_to_ground_start_0 = Variable('any_move_ground_to_ground_start_0', Crane)
any_move_ground_to_ground_start_2 = Variable('any_move_ground_to_ground_start_2', Location)
any_move_ground_to_ground_start_3 = Variable('any_move_ground_to_ground_start_3', Location)
move_ground_to_ground_start.add_precondition(Not(Exists(moving_ground_to_ground(any_move_ground_to_ground_start_0, Param2, any_move_ground_to_ground_start_2, any_move_ground_to_ground_start_3), any_move_ground_to_ground_start_0, any_move_ground_to_ground_start_2, any_move_ground_to_ground_start_3)))
move_ground_to_ground_start.add_effect(available(Param1), False)
move_ground_to_ground_start.add_effect(on_ground(Param2), False)
move_ground_to_ground_start.add_effect(at(Param2, Param3), False)
move_ground_to_ground_start.add_effect(moving_ground_to_ground(Param1, Param2, Param3, Param4), True)
problem.add_action(move_ground_to_ground_start)

# --- action move_ground_to_ground_end
move_ground_to_ground_end = InstantaneousAction('move_ground_to_ground_end', Param1=Crane, Param2=Container, Param3=Container, Param4=Location)
Param1 = move_ground_to_ground_end.parameter('Param1')
Param2 = move_ground_to_ground_end.parameter('Param2')
Param3 = move_ground_to_ground_end.parameter('Param3')
Param4 = move_ground_to_ground_end.parameter('Param4')
move_ground_to_ground_end.add_precondition(moving_ground_to_ground(Param1, Param2, Param3, Param4))
move_ground_to_ground_end.add_effect(moving_ground_to_ground(Param1, Param2, Param3, Param4), False)
move_ground_to_ground_end.add_effect(on_ground(Param2), True)
move_ground_to_ground_end.add_effect(at(Param2, Param4), True)
move_ground_to_ground_end.add_effect(clear(Param2), True)
move_ground_to_ground_end.add_effect(available(Param1), True)
problem.add_action(move_ground_to_ground_end)

# --- action move_top_to_ground_start
move_top_to_ground_start = InstantaneousAction('move_top_to_ground_start', Param1=Crane, Param2=Container, Param3=Container, Param4=Location)
Param1 = move_top_to_ground_start.parameter('Param1')
Param2 = move_top_to_ground_start.parameter('Param2')
Param3 = move_top_to_ground_start.parameter('Param3')
Param4 = move_top_to_ground_start.parameter('Param4')
move_top_to_ground_start.add_precondition(available(Param1))
move_top_to_ground_start.add_precondition(on(Param2, Param3))
move_top_to_ground_start.add_precondition(clear(Param2))
move_top_to_ground_start.add_precondition(at(Param3, Param4))
any_move_top_to_ground_start_0 = Variable('any_move_top_to_ground_start_0', Crane)
any_move_top_to_ground_start_2 = Variable('any_move_top_to_ground_start_2', Container)
any_move_top_to_ground_start_3 = Variable('any_move_top_to_ground_start_3', Location)
move_top_to_ground_start.add_precondition(Not(Exists(moving_top_to_ground(any_move_top_to_ground_start_0, Param2, any_move_top_to_ground_start_2, any_move_top_to_ground_start_3), any_move_top_to_ground_start_0, any_move_top_to_ground_start_2, any_move_top_to_ground_start_3)))
move_top_to_ground_start.add_effect(available(Param1), False)
move_top_to_ground_start.add_effect(on(Param2, Param3), False)
move_top_to_ground_start.add_effect(clear(Param2), False)
move_top_to_ground_start.add_effect(moving_top_to_ground(Param1, Param2, Param3, Param4), True)
move_top_to_ground_start.add_effect(clear(Param3), True)
problem.add_action(move_top_to_ground_start)

# --- action move_top_to_ground_end
move_top_to_ground_end = InstantaneousAction('move_top_to_ground_end', Param1=Crane, Param2=Container, Param3=Container, Param4=Location)
Param1 = move_top_to_ground_end.parameter('Param1')
Param2 = move_top_to_ground_end.parameter('Param2')
Param3 = move_top_to_ground_end.parameter('Param3')
Param4 = move_top_to_ground_end.parameter('Param4')
move_top_to_ground_end.add_precondition(moving_top_to_ground(Param1, Param2, Param3, Param4))
move_top_to_ground_end.add_effect(moving_top_to_ground(Param1, Param2, Param3, Param4), False)
move_top_to_ground_end.add_effect(on_ground(Param2), True)
move_top_to_ground_end.add_effect(at(Param2, Param4), True)
move_top_to_ground_end.add_effect(clear(Param2), True)
move_top_to_ground_end.add_effect(available(Param1), True)
problem.add_action(move_top_to_ground_end)

# --- action move_top_to_top_start
move_top_to_top_start = InstantaneousAction('move_top_to_top_start', Param1=Crane, Param2=Container, Param3=Container, Param4=Container, Param5=Location)
Param1 = move_top_to_top_start.parameter('Param1')
Param2 = move_top_to_top_start.parameter('Param2')
Param3 = move_top_to_top_start.parameter('Param3')
Param4 = move_top_to_top_start.parameter('Param4')
Param5 = move_top_to_top_start.parameter('Param5')
move_top_to_top_start.add_precondition(available(Param1))
move_top_to_top_start.add_precondition(on(Param2, Param3))
move_top_to_top_start.add_precondition(clear(Param2))
move_top_to_top_start.add_precondition(at(Param3, Param5))
move_top_to_top_start.add_precondition(at(Param4, Param5))
move_top_to_top_start.add_precondition(clear(Param4))
any_move_top_to_top_start_0 = Variable('any_move_top_to_top_start_0', Crane)
any_move_top_to_top_start_2 = Variable('any_move_top_to_top_start_2', Container)
any_move_top_to_top_start_3 = Variable('any_move_top_to_top_start_3', Container)
any_move_top_to_top_start_4 = Variable('any_move_top_to_top_start_4', Location)
move_top_to_top_start.add_precondition(Not(Exists(moving_top_to_top(any_move_top_to_top_start_0, Param2, any_move_top_to_top_start_2, any_move_top_to_top_start_3, any_move_top_to_top_start_4), any_move_top_to_top_start_0, any_move_top_to_top_start_2, any_move_top_to_top_start_3, any_move_top_to_top_start_4)))
move_top_to_top_start.add_effect(available(Param1), False)
move_top_to_top_start.add_effect(on(Param2, Param3), False)
move_top_to_top_start.add_effect(clear(Param2), False)
move_top_to_top_start.add_effect(moving_top_to_top(Param1, Param2, Param3, Param4, Param5), True)
move_top_to_top_start.add_effect(clear(Param3), True)
problem.add_action(move_top_to_top_start)

# --- action move_top_to_top_end
move_top_to_top_end = InstantaneousAction('move_top_to_top_end', Param1=Crane, Param2=Container, Param3=Container, Param4=Container, Param5=Location)
Param1 = move_top_to_top_end.parameter('Param1')
Param2 = move_top_to_top_end.parameter('Param2')
Param3 = move_top_to_top_end.parameter('Param3')
Param4 = move_top_to_top_end.parameter('Param4')
Param5 = move_top_to_top_end.parameter('Param5')
move_top_to_top_end.add_precondition(moving_top_to_top(Param1, Param2, Param3, Param4, Param5))
move_top_to_top_end.add_effect(moving_top_to_top(Param1, Param2, Param3, Param4, Param5), False)
move_top_to_top_end.add_effect(on(Param2, Param4), True)
move_top_to_top_end.add_effect(at(Param2, Param5), True)
move_top_to_top_end.add_effect(clear(Param2), True)
move_top_to_top_end.add_effect(available(Param1), True)
problem.add_action(move_top_to_top_end)

# --- action move_robot_start
move_robot_start = InstantaneousAction('move_robot_start', Param1=Robot, Param2=Location, Param3=Location)
Param1 = move_robot_start.parameter('Param1')
Param2 = move_robot_start.parameter('Param2')
Param3 = move_robot_start.parameter('Param3')
move_robot_start.add_precondition(available(Param1))
move_robot_start.add_precondition(at(Param1, Param2))
any_move_robot_start_0 = Variable('any_move_robot_start_0', Robot)
any_move_robot_start_1 = Variable('any_move_robot_start_1', Location)
any_move_robot_start_2 = Variable('any_move_robot_start_2', Location)
move_robot_start.add_precondition(Not(Exists(moving_robot(any_move_robot_start_0, any_move_robot_start_1, any_move_robot_start_2), any_move_robot_start_0, any_move_robot_start_1, any_move_robot_start_2)))
move_robot_start.add_effect(available(Param1), False)
move_robot_start.add_effect(at(Param1, Param2), False)
move_robot_start.add_effect(moving_robot(Param1, Param2, Param3), True)
problem.add_action(move_robot_start)

# --- action move_robot_end
move_robot_end = InstantaneousAction('move_robot_end', Param1=Robot, Param2=Crane, Param3=Location)
Param1 = move_robot_end.parameter('Param1')
Param2 = move_robot_end.parameter('Param2')
Param3 = move_robot_end.parameter('Param3')
move_robot_end.add_precondition(moving_robot(Param1, Param2, Param3))
move_robot_end.add_effect(moving_robot(Param1, Param2, Param3), False)
move_robot_end.add_effect(at(Param1, Param3), True)
move_robot_end.add_effect(available(Param1), True)
problem.add_action(move_robot_end)

writer = PDDLWriter(problem)
writer.write_domain('generated_domain.pddl')
writer.write_problem('generated_problem.pddl')
print('Generated PDDL files in current directory')